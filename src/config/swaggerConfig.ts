import swaggerJsdoc from 'swagger-jsdoc';

export const swaggerConfig = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Event Management System API',
      version: '1.0.0',
      description: 'API for events management',
       termsOfService: 'https://baacumen.com/pages/terms',
       contact: {
          name: 'Baacumen Support',
          url: 'https://baacumen.com/contact',
          email: 'support@baacumen.com' 
       },        
      license: {
         name: 'MIT License',
         url: 'https://opensource.org/licenses/MIT'     
      }       
    },
    components: {
      schemas: {
        User: {
          type: 'object',
          required: ['username', 'email'],
          properties: {
            username: {
              type: 'string',
              description: 'The name of the user',
            },
            email: {
              type: 'string',
              format: 'email',
              description: 'The email of the user',
            },
          },
        },
        Event: {
          type: 'object',
          required: ['title', 'description', 'date', 'location','startDate','endDate'],
          properties: {
            title: {
              type: 'string',
              description: 'Title of the event',
            },
            description: {
              type: 'string',
              format: 'description',
              description: 'The description of the event',
            },
            date: {
              type: 'string',
              format: 'date',
              description: 'The date of the event',
            },
            location: {
              type: 'string',
              format: 'location',
              description: 'The location of the event',
            },
            startDate: {
              type: 'string',
              format: 'date',
              description: 'The startdate of the event',
            },
            endDate: {
              type: 'string',
              format: 'date',
              description: 'The endDate of the event',
            },
          },
        },
        Rsv: {
          type: 'object',
          required: ['userId', 'eventId', 'status'],
          properties: {
            userId: {
              type: 'string',
              description: 'UserId of the event',
            },
            eventId: {
              type: 'string',
              format: 'eventId',
              description: 'The eventId of the event',
            },
            status: {
              type: 'string',
              format: 'status',
              description: 'The status of the event',
            },
          },
        },
        // Add a schema for the content generation request
        ContentGenerateRequest: {
          type: 'object',
          properties: {
            prompt: {
              type: 'string',
              description: 'The text prompt for the AI model.',
              example: 'Generate a list of popular cookie recipes.',
            },
            topK: {
              type: 'integer',
              description: 'The number of top results to return. Defaults to 5 if not provided.',
              example: 3,
            },
          },
          required: ['prompt'], // 'topK' is optional
        },
        ContentGenerateResponse: {
          type: 'object',
          properties: {
            generatedText: {
              type: 'string',
              description: 'The content generated by the AI model.',
              example: '1. Chocolate Chip Cookies\n2. Oatmeal Raisin Cookies\n3. Peanut Butter Cookies',
            },
          },
        },
      },
    },
  },
  apis: ['./src/routes/rsvs.ts','./src/routes/events.ts','./src/routes/users.ts', './src/routes/generate.ts'], // Add the path to the generate route file
};

// Create a function to generate Swagger docs
export const generateSwaggerDocs = () => swaggerJsdoc(swaggerConfig);
